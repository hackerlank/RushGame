#pragma once
#include <queue>
#include <stack>


//在此为了方便操作状态的管理, 易于添加新状态, 快速修改状态跳转的bug,  使用类似状态机的管理方式
enum EMainState
{
	eMS_NONE,
	eMS_BACK,//返回上一个状态
	eMS_WAIT,
	eMS_NORMAL,
	
	eMS_PLACE_ELEMENT,
	
	eMS_EDIT_AREA,
	eMS_DRAW_AREA,
	eMS_FILL_AREA,
	eMS_ERASE_AREA,

	eMS_MOVE_ELEMENT,
	eMS_MOVE_NEW_PATH_KEY_POS,
	eMS_ROTATE_ELEMENT,
	eMS_ROTATE_ELEMENT_ING,

	eMS_COLONY_EDIT,
	
	eMS_MOVE_MAP,
	eMS_SELECT_BEGIN,
	eMS_SELECT_ING,
	eMS_SELECT_END,
	eMS_SELECT_ADD,//添加选择
	eMS_SELECT_NOT,//反选
	eMS_MEASURE,

	eMS_PASTE_ELEMENT,

	eMS_HAVE_FOCUS,
	


	//虚状态 概念性的东西, 不要在 ADD_TRANSIT_STATE 中使用
	eANY_STATE,		//虚状态
	eASSISTANT_STATE, //新加的功能, 懒得修改结构了, 在这里加个虚状态, 意义上与其他的不同,
	eMS_COUNT
};


enum EEvent
{
	//鼠标事件
	eEVENT_L_DOWN,
	eEVENT_DB_L_DOWN,
	eEVENT_L_UP,
	eEVENT_R_DOWN,
	eEVENT_R_UP,
	eEVENT_M_DOWN,
	eEVENT_M_UP,
	eEVENT_MOUSE_MOVE,

	eEVENT_L_DOWN_IN_VIEW,
	eEVENT_L_UP_IN_VIEW,
	eEVENT_R_DOWN_IN_VIEW,
	eEVENT_R_UP_IN_VIEW,
	eEVENT_M_DOWN_IN_VIEW,
	eEVENT_M_UP_IN_VIEW,
	eEVENT_MOUSE_MOVE_IN_VIEW,
	
	//按键事件
	eEVENT_EIXT,
	eEVENT_SHIFT_DOWN,
	eEVENT_SHIFT_UP,
	eEVENT_CTRL_DOWN,
	eEVENT_CTRL_UP,
	eEVENT_TAB_DOWN,
	eEVENT_TAB_UP,
	
	//加载事件
	eEVENT_LOAD_MAP_ING,
	eEVENT_LOAD_MAP_OK,
	eEVENT_LOAD_MAP_FAILD,
	eEVENT_LOAD_SCENE_ING,
	eEVENT_LOAD_SCENE_OK,
	eEVENT_LOAD_AREA_OK,
	

	//编辑状态事件
	eEVENT_PLACE_ELEMENT,
	
	eEVENT_EXIT_EDIT_AREA,
	eEVENT_BEGIN_EDIT_AREA,
	eEVENT_DRAW_AREA,
	eEVENT_FILL_AREA,
	eEVENT_ERASE_AREA,
	eEVENT_NEW_PATH_KEY_POS,
	
	eEVENT_CLEAR_COPY,
	eEVENT_PASTE_ELEMENT,			//粘贴,(只是在鼠标上显示,未放进场景)
	eEVENT_PUT_PASTE_ELEMENT,		//放进场景
	
	eEVENT_COLONY_EDIT_BEGIN,
	eEVENT_COLONY_EDIT_END,

	eEVENT_MEASURE_BEGIN,
	eEVENT_MEASURE_END,

	eEVENT_ROTATE_ELEMENT,
	eEVENT_ROTATE_ELEMENT_BEGIN,
	eEVENT_ROTATE_ELEMENT_END,


	eEVENT_CLEAR_AS,

	//状态事件
	eEVENT_GET_FOCUS,
	eEVENT_LOST_FOCUS,
	

	eEVENT_BACK_NORMAL,


	eEVENT_THE_OTHERS,//表示 未被 ADD_TRANSIT_STATE 添加的其余事件 
	eEVENT_COUNT
};

enum EAssistantState//辅助状态
{
	eAS_NONE  = 0,
	eAS_SHIFT = 1,
	eAS_CTRL  = 1<<1,
	eAS_TAB   = 1<<2,


	eAS_END,
	eAS_ALL = ((eAS_END - 1) << 1) - 1
};

#define STATE_TABLE_NEED  int** ppStateTable;
#define STATE_TABLE_BEGIN \
	void InitStateTable(){\
		ppStateTable = new int*[eMS_COUNT];\
		ZeroMemory((void*)ppStateTable,sizeof(int)*eMS_COUNT);

#define STATE_BEGIN(name) \
	int aTemp##name[] = {0 

#define ADD_TRANSIT_STATE(event, distState)  ,(event),(distState)
#define ATTACH_ASSISTANT_STATE(event, distState, set_remove)  ,(event),(distState),(set_remove)

#define STATE_END(name) \
	};\
	aTemp##name[0] = sizeof(aTemp##name)/sizeof (int);\
	int* pTemp##name = new int[aTemp##name[0]];\
	memcpy((void*)pTemp##name, (void*)aTemp##name, sizeof(aTemp##name));\
	ppStateTable[name] = pTemp##name;

#define STATE_TABLE_END \
	}



//使用REGISTER_STATER_TABLE 记的使用 UNREGISTER_STATER_TABLE 否则会内存泄露
#define REGISTER_STATER_TABLE  InitStateTable();

#define UNREGISTER_STATER_TABLE \
	for (int i = 0; i < eMS_COUNT; i++)\
	{\
		delete[] ppStateTable[i];\
	}\
	delete[] ppStateTable;



class CStateMgr
{
	STATE_TABLE_NEED	//必要成员包含

	STATE_TABLE_BEGIN	//开始定义状态表 STATE_TABLE_END 结束定义

		STATE_BEGIN(eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,		eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_L_DOWN_IN_VIEW,		eMS_SELECT_BEGIN)
			ADD_TRANSIT_STATE(eEVENT_PLACE_ELEMENT,			eMS_PLACE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_GET_FOCUS,				eMS_HAVE_FOCUS)
			ADD_TRANSIT_STATE(eEVENT_BEGIN_EDIT_AREA,		eMS_EDIT_AREA)
			ADD_TRANSIT_STATE(eEVENT_PASTE_ELEMENT,			eMS_PASTE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_ROTATE_ELEMENT,		eMS_ROTATE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_COLONY_EDIT_BEGIN,		eMS_COLONY_EDIT)
			ADD_TRANSIT_STATE(eEVENT_MEASURE_BEGIN,			eMS_MEASURE)
			//ADD_TRANSIT_STATE(eEVENT_SHIFT_DOWN,	eMS_SELECT_END)
		STATE_END(eMS_NORMAL)

		STATE_BEGIN(eMS_COLONY_EDIT)
			ADD_TRANSIT_STATE(eEVENT_COLONY_EDIT_END,		eMS_NORMAL)
		STATE_END(eMS_COLONY_EDIT)

		STATE_BEGIN(eMS_MEASURE)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,		eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_MEASURE_END,			eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_DB_L_DOWN,				eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_EIXT,					eMS_NORMAL)
		STATE_END(eMS_MEASURE)

		
		STATE_BEGIN(eMS_ROTATE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_ROTATE_ELEMENT_BEGIN,	eMS_ROTATE_ELEMENT_ING)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN,				eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_ROTATE_ELEMENT_END,	eMS_NORMAL)
		STATE_END(eMS_ROTATE_ELEMENT)

		STATE_BEGIN(eMS_ROTATE_ELEMENT_ING)
			ADD_TRANSIT_STATE(eEVENT_L_UP,					eMS_BACK)
		STATE_END(eMS_ROTATE_ELEMENT_ING)

		
		STATE_BEGIN(eMS_EDIT_AREA)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,	eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_EXIT_EDIT_AREA,	eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_DRAW_AREA,			eMS_DRAW_AREA)
			ADD_TRANSIT_STATE(eEVENT_FILL_AREA,			eMS_FILL_AREA)
			ADD_TRANSIT_STATE(eEVENT_ERASE_AREA,		eMS_ERASE_AREA)
		STATE_END(eMS_EDIT_AREA)

		STATE_BEGIN(eMS_DRAW_AREA)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,	eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_EXIT_EDIT_AREA,	eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_FILL_AREA,			eMS_FILL_AREA)
			ADD_TRANSIT_STATE(eEVENT_ERASE_AREA,		eMS_ERASE_AREA)
		STATE_END(eMS_DRAW_AREA)

		STATE_BEGIN(eMS_FILL_AREA)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,	eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_EXIT_EDIT_AREA,	eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_DRAW_AREA,			eMS_DRAW_AREA)
			ADD_TRANSIT_STATE(eEVENT_ERASE_AREA,		eMS_ERASE_AREA)
		STATE_END(eMS_FILL_AREA)

		STATE_BEGIN(eMS_ERASE_AREA)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,	eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_EXIT_EDIT_AREA,	eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_DRAW_AREA,			eMS_DRAW_AREA)
			ADD_TRANSIT_STATE(eEVENT_FILL_AREA,			eMS_FILL_AREA)
		STATE_END(eMS_ERASE_AREA)

		STATE_BEGIN(eMS_HAVE_FOCUS)
			ADD_TRANSIT_STATE(eEVENT_PASTE_ELEMENT,		eMS_PASTE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_L_DOWN_IN_VIEW,	eMS_MOVE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_LOST_FOCUS,		eMS_BACK)
		STATE_END(eMS_HAVE_FOCUS)

		STATE_BEGIN(eMS_MOVE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_NEW_PATH_KEY_POS,	eMS_MOVE_NEW_PATH_KEY_POS)
			ADD_TRANSIT_STATE(eEVENT_L_UP,				eMS_NORMAL)
		STATE_END(eMS_MOVE_ELEMENT)


		STATE_BEGIN(eMS_MOVE_NEW_PATH_KEY_POS)
			ADD_TRANSIT_STATE(eEVENT_L_UP,				eMS_NORMAL)
		STATE_END(eMS_MOVE_NEW_PATH_KEY_POS)

		STATE_BEGIN(eMS_PLACE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_PASTE_ELEMENT,		eMS_PASTE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_GET_FOCUS,			eMS_HAVE_FOCUS)
			ADD_TRANSIT_STATE(eEVENT_EIXT,				eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,	eMS_MOVE_MAP)
		STATE_END(eMS_PLACE_ELEMENT)

		STATE_BEGIN(eMS_SELECT_BEGIN)
			ADD_TRANSIT_STATE(eEVENT_MOUSE_MOVE_IN_VIEW,	eMS_SELECT_ING)
			ADD_TRANSIT_STATE(eEVENT_L_UP,					eMS_NORMAL)
		STATE_END(eMS_SELECT_BEGIN)

		STATE_BEGIN(eMS_SELECT_ING)
			ADD_TRANSIT_STATE(eEVENT_L_UP,			eMS_NORMAL)
		STATE_END(eMS_SELECT_ING)
		

		STATE_BEGIN(eMS_PASTE_ELEMENT)
			ADD_TRANSIT_STATE(eEVENT_R_DOWN_IN_VIEW,			eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_PUT_PASTE_ELEMENT,			eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_CLEAR_COPY,				eMS_NORMAL)
			ADD_TRANSIT_STATE(eEVENT_EIXT,						eMS_NORMAL)
		STATE_END(eMS_PASTE_ELEMENT)
		
		



		STATE_BEGIN(eMS_MOVE_MAP)
			ADD_TRANSIT_STATE(eEVENT_R_UP, eMS_BACK)
		STATE_END(eMS_MOVE_MAP)

		STATE_BEGIN(eMS_NONE)
			ADD_TRANSIT_STATE(eEVENT_LOAD_MAP_OK,	eMS_NORMAL)
		STATE_END(eMS_NONE)

		STATE_BEGIN(eMS_WAIT)
			ADD_TRANSIT_STATE(eEVENT_THE_OTHERS, eMS_BACK)
		STATE_END(eMS_WAIT)

		STATE_BEGIN(eANY_STATE)
			ADD_TRANSIT_STATE(eEVENT_BACK_NORMAL,	eMS_NORMAL)
			//ADD_TRANSIT_STATE(eEVENT_LOAD_MAP_FAILD, eMS_NONE)
			//ADD_TRANSIT_STATE(eEVENT_LOAD_MAP_ING,	eMS_NONE)
		STATE_END(eANY_STATE)



		STATE_BEGIN(eASSISTANT_STATE)
			ATTACH_ASSISTANT_STATE(eEVENT_SHIFT_DOWN,	eAS_SHIFT,	1)
			ATTACH_ASSISTANT_STATE(eEVENT_SHIFT_UP,		eAS_SHIFT,	0)
			ATTACH_ASSISTANT_STATE(eEVENT_CTRL_DOWN,	eAS_CTRL,	1)
			ATTACH_ASSISTANT_STATE(eEVENT_CTRL_UP,		eAS_CTRL,	0)
			ATTACH_ASSISTANT_STATE(eEVENT_TAB_DOWN,		eAS_TAB,	1)
			ATTACH_ASSISTANT_STATE(eEVENT_TAB_UP,		eAS_TAB,	0)
		STATE_END(eASSISTANT_STATE)
		
	STATE_TABLE_END		
private:
	CStateMgr(void);
public:
	~CStateMgr(void);
	static CStateMgr& Inst();
	void DoEvent(EEvent eEvent);
	void UpdateAssistantState(EEvent eEvent);

	void SetState(EMainState eState);
	void SetAssistantState(EAssistantState eAssistantState);
	void RemoveAssistantState(EAssistantState eAssistantState);
	EMainState GetDistState(EMainState curState, EEvent eEvent) const;
	bool IsStateExisted(EMainState eState)const;

	static bool IsState(EMainState eState);
	static bool IsFronState(EMainState eState);
	static bool IsAssistState(int mark);//参数可以是一个或 多个 EAssistantState值的(|)
	static EMainState GetCurState();
	
private:
	std::vector<EMainState>		m_stackState;		//状态栈, 状态跳转可能存在循环,
													//为了处理此问题,将访问之前的栈内状态,如果存在就直接跳转,不存在,则为子状态
	static EMainState	m_eCurState;				//主状态 , 其实它等于m_stackState的最后个元素, 如果栈为空则 等于eMS_NONE
	static EMainState	m_eFrontState;
	static int m_iAssistantState;					//辅助状态 (如 主状态为某值是, 想判断 shift等 是否按下,用到此变量)
};